apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment  #nome que vai aparecer no deployments
spec:
  replicas: 1 #por default o deployments possui uma replica. então essa definição de 1 é opcional
  selector:
    matchLabels:
      app: mysql-deployment  #Essa propriedade serve para mapear a relação com outras configurações. Ex.: arquivo de deployments com o arquivo de services
  template:
    metadata:
      labels:
        app: mysql-deployment #utilizei os mesmos nomes para facilitar e não criar confusão.
    spec: #especificações do container. configurações para subir o container
      containers:
      - name: mysql-image #nome da imagem
        image: mysql:5.6 #imagem que vamos utilizar no dockerhub ou outro lugar
        resources:
          limits:
            memory: "512Mi" #quantitativo de memória que o pod vai ter
            cpu: "500m" #quantitativo de CPU em htz
        ports:
        - containerPort: 3306 #porta que o Pod "escuta"
        env:
          - name: MYSQL_ROOT_PASSWORD
            #value: wordpress-2020 -> após configuração da secret não utilizamos mais dessa forma
            valueFrom: #após configuração da secret no arquivo de configurações, vamos utilizar o valueFrom para acessá-las
              secretKeyRef:
                name: mysql-secret #o nome da secret é " metadata: name: mysql-secret"
                key: password #a key foi configurada como "data: password" lá na secret
        volumeMounts: #configurando os volumes que foram definidos em configuracoes
          - name: mysql-volume #definindo um nome
            mountPath: /var/lib/mysql #onde que é gravado a informação
      volumes: #criando uma spec de volume - no mesmo nível que containers
        - name: mysql-volume #esse name precisa ser o mesmo que o  definido em VolumeMounts.
          persistentVolumeClaim:
            claimName: mysql-pvc #pegar o mesmo nome que foi definido em configuracoes



            #Agora já temos o arquivo de deployment configurado com o secret e volume.